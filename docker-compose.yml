version: "3.8"

services:
  postgres:
    image: postgres:15
    restart: always
    environment:
      POSTGRES_USER:     ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_DB:       ${POSTGRES_DB:-mydb}
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${POSTGRES_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    depends_on:
      postgres:
        condition: service_healthy
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
    environment:
      # point SQLAlchemy at the Postgres container
      DATABASE_URL: "postgresql+asyncpg://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@postgres:5432/${POSTGRES_DB:-mydb}"


      # Slack
      SLACK_SIGNING_SECRET:  ${SLACK_SIGNING_SECRET}
      SLACK_CLIENT_ID:       ${SLACK_CLIENT_ID}
      SLACK_CLIENT_SECRET:   ${SLACK_CLIENT_SECRET}
      SLACK_REDIRECT_URI:    ${SLACK_REDIRECT_URI}

      # Groq LLM
      GROQ_API_KEY:          ${GROQ_API_KEY}

      # Zoho
      ZOHO_CLIENT_ID:        ${ZOHO_CLIENT_ID}
      ZOHO_CLIENT_SECRET:    ${ZOHO_CLIENT_SECRET}
      ZOHO_REDIRECT_URI:     ${ZOHO_REDIRECT_URI}

  # frontend:
  #   build:
  #     context: ./frontend
  #     dockerfile: Dockerfile
  #   depends_on:
  #     - backend
  #   ports:
  #     - "3000:3000"
  #   volumes:
  #     - ./frontend:/app
  #     - /app/node_modules
  #     - /app/.next
  #   environment:
  #     NODE_ENV: development
  #   command: sh -c "npm install && npm run dev"

volumes:
  pgdata:
